# -*- coding: utf-8 -*-
"""flask covid chatbot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19J210-XD50xE-3lEkcebcwFn9IKMiIwX
"""

# !pip install -q flask_wtf

from flask import Flask, render_template, session, redirect, url_for, session
from flask_wtf import FlaskForm
from wtforms import *
from wtforms.validators import NumberRange
import numpy as np 
from tensorflow.keras.models import load_model
import tensorflow as tf
import pandas as pd
import re

#from https://github.com/wearetriple/ai-faqbot-who/blob/master/Corona_WHO_FAQ.ipynb
def preprocess_sentences(input_sentences):
    input_sentences = [re.sub(r'\xa0', '', str(inp)) for inp in list(input_sentences)]
    return [re.sub(r'(covid-19|covid|n-cov19|sars-cov-19)', 'coronavirus', str(input_sentence), flags=re.I) 
            for input_sentence in input_sentences]

# data = pd.read_csv('/content/drive/My Drive/Answer Sheet Oct 2020 (A).csv')
data = pd.read_csv('Answer Sheet Oct 2020 (A).csv')
answers = data['answers']
context = data['contexts']


def return_prediction(model, question):

  question_encodings = model.signatures['question_encoder'](
      tf.constant(preprocess_sentences([question]))
  )['outputs']

  # Get the responses
  test_response = answers[np.argmax(np.inner(question_encodings, response_encodings), axis=1)]
  return test_response.item()

app = Flask(__name__)
# Configure a secret SECRET_KEY
# We will later learn much better ways to do this!!
app.config['SECRET_KEY'] = 'openSesame'


# REMEMBER TO LOAD THE MODEL AND THE SCALER!
model = load_model('whole covidbot')

response_encodings = model.signatures['response_encoder'](
      input=tf.constant(answers),
      context=tf.constant(context)
    )['outputs']

# Now create a WTForm Class
# Lots of fields available:
# http://wtforms.readthedocs.io/en/stable/fields.html
class QuestionForm(FlaskForm):
  question = StringField(label='What is your question?')
  submit = SubmitField('Submit')


@app.route('/', methods=['GET', 'POST'])
def index():

  # Create instance of the form.
  form = QuestionForm()
  # If the form is valid on submission (we'll talk about validation next)
  if form.validate_on_submit():
      # Grab the data from the breed on the form.

      session['question'] = form.question.data

      return render_template('QA.html', form=form, answer=return_prediction(model, str(session['question'])))

  return render_template('QA.html', form=form)


# @app.route('/prediction')
# def prediction():

#     content = {}

#     content['sepal_length'] = float(session['sep_len'])
#     content['sepal_width'] = float(session['sep_wid'])
#     content['petal_length'] = float(session['pet_len'])
#     content['petal_width'] = float(session['pet_wid'])

#     results = return_prediction(model=flower_model,scaler=flower_scaler,sample_json=content)

#     return render_template('prediction.html',results=results)


if __name__ == '__main__':
    app.run(debug=True)